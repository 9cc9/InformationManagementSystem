# encoding: utf-8  # for invalid multibyte char (US-ASCII)
class StudentsController < ApplicationController
  before_filter :authorize

  # 学生列表
  def index
    @students = Student.paginate(:page => params[:page], :per_page => 10)

    respond_to do |format|
      format.html # index.html.erb
      format.json { render :json => @students }
    end
  end


  # 学生详情
  def show
    @student = Student.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render :json => @students }
    end
  end

  # 创建新学生页面
  def new
    @student = Student.new
    @achievement = AchievementItem.new(params[:id])
    respond_to do |format|
      format.html # new_project.html.erb
      format.json { render :json => @students }
    end
  end

  # 修改学生资料页面
  def edit
    @student = Student.find(params[:id])
  end

  # 根据输入参数创建新学生
  def create
    @student = Student.new(params[:student])
    respond_to do |format|
      if @student.save
        format.html { redirect_to @student, :notice => "成功创建学生信息！" }
        format.json { render :json => @student, :status => :created, :location => @student }
      else
        format.html { render :action => "new" }
        format.json { render :json => @student.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /students/1
  # PUT /students/1.json
  def update
    @student = Student.find(params[:id])

    respond_to do |format|
      if @student.update_attributes(params[:student])
        format.html { redirect_to @student, :notice => "成功更新学生信息!" }
        format.json { head :no_content }
      else
        format.html { render :action => "edit" }
        format.json { render :json => @student.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /students/1
  # DELETE /students/1.json
  def destroy
    @student = Student.find(params[:id])
    @student.destroy

    respond_to do |format|
      format.html { redirect_to students_url, :notice => "成功删除学生信息！" }
      format.json { head :no_content }
    end
  end

  # 增加学生成果条目
  def add_achievement_item
    Student.find(params[:id]).create_achievement_items_with_params(params[:achievement_item])
    redirect_to student_path(params[:id])
  end

  # 增加学生其他信息
  def add_other_information_item
    Student.find(params[:id]).create_other_information_items_with_params(params[:achievement_item])
    redirect_to student_path(params[:id])
  end

  # 搜索学生
  def process_students_search
    conditions, project_enable  = generate_sql_condition(params)  # project_enable: 是否加入project_type搜索 ,false 不加入
    @students = Student.all(:conditions => conditions)
    @students.select!{|student| student.check_project_type(params["project_type"])} if project_enable #== true
    render :action => :index
  end


  # 生成sql的条件查询语句, achieve_enable: 是否加入成果搜索 ,false 不加入
  def generate_sql_condition(params)
    conditions, project_enable = "", true
    (params || []).each do |key, value|
      case key
        when "project_type"
          project_enable = false if value == "-"
        when "school_number"
          conditions << " school_number LIKE '%#{value}%' and" unless value.empty?
        when "academy"
          conditions << " academy LIKE '%#{value}%' and" if value != "-"
        when "major"
          conditions << " major LIKE '%#{value}%' and" unless value.empty?
      end
    end
    conditions.chop!.chop!.chop! if conditions != ""
    return conditions, project_enable
  end


end
